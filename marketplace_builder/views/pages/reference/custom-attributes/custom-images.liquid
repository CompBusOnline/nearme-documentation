---
converter: markdown
metadata:
  title: Custom Images
slug: reference/custom-attributes/custom-images
---

**Custom Images** are used to add one or more images to a Profile, Order, Customization, or Transactable.

## Defining

You can enable CustomImages by adding a CustomAttribute with `attribute_type` set to `photo`, for example:

<pre><code class="language-yaml">
- name: avatar
  attribute_type: photo
</code></pre>

## Version defaults

Each custom image upon creation is saved in three versions.

The defaults are:

| Size   | Width (px) | Height (px) |
| ------ | ---------- | ----------- |
| mini   | 56         | 56          |
| thumb  | 144        | 109         |
| normal | 1280       | 960         |

You can alter the width and height of each version with `versions_configuration`:

<pre><code class="language-yaml">
- name: avatar
  attribute_type: photo
  versions_configuration:
    normal:
      width: 300
      height: 300
</code></pre>

## Form configuration

Custom Image attribute must be defined in a form to whitelist and validate the form request.

<pre><code class="language-yaml">
...
  custom_images:
    avatar:
      image:
        validation: {
          file_content_type: { allow: ['image/jpeg', 'image/png', 'image/gif'] }
        }
...
</code></pre>

## Fields

Each image supports the following self-descriptive fields:

| Field name | Type   | Note                                                                 |
| ---------- | ------ | -------------------------------------------------------------------- |
| image      | String | Image that has been sent via form - usually original input from user |

## Displaying, updating

After setting up images as described above, you can further customize image editing in the markup for the forms:

{% raw %}

<pre><code class="language-liquid">
  {% if form_builder.fields.profiles.seller.custom_images.avatar.image.value %}
    &lt;div class="preview"&gt;
      &lt;figure&gt;&lt;a href="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.value }}"&gt;&lt;img src="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.value }}"&gt;&lt;/a&gt;&lt;/figure&gt;
    &lt;/div&gt;
  {% endif %}

  &lt;div&gt;
    &lt;label&gt;&lt;span&gt;Select a new image...&lt;/span&gt;&lt;span&gt;or drag photo here to upload&lt;/span&gt;
    &lt;input accept="image/gif, image/jpeg, image/jpg, image/png" name="{{ form_builder.fields.profiles.seller.custom_images.avatar.image.name }}" type="file"&gt;&lt;/label&gt;
    {% if form_builder.errors['profiles.seller.custom_images.avatar.image'] %}
      &lt;p&gt;{{ form_builder.errors['profiles.seller.custom_images.avatar.image'] }}&lt;/p&gt;
    {% endif %}
  &lt;/div&gt;
</code></pre>

{% endraw %}

The example above shows the predefined image tag.

## Using GraphQL to query for `CustomImage`

<pre><code class="language-graphql">
query test_image_query {
  customizations {
    results {
      avatar: custom_image(name: "avatar") {
        normal: url(version: "normal")
        thumb: url(version: "thumb")
        transformed: url(version: "transformed")
      }
    }
  }
}
</code></pre>
