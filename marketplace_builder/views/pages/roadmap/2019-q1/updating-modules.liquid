---
converter: markdown
metadata:
  title: Updating Module
  description: This section describes updating module process
slug: roadmap/2019-q1/updating-modules
searchable: true
---

This section describes updating module process.

## Problem

It will be quite rare scenario when developers will use other people module 'as is'. Most likely, they will have to do some customizations, extensions, improvements. Moreover, after some time, a new version of such customized module could be pushed. Upgrading the module most likely will create conflicts between files updated via module's creator and customizations made by developer. We need to provide a decent UX and workflow for resolving those conflicts.

### Current behavior

Currently you can use `marketplace-kit modules *` helper command to pull public files. When you are done and you deploy changes, the original module files are overwritten. It means, that upgrading the module would overwrite your overwrites.

## Solution

The `marketplace-kit deploy` command should not overwrite the original module files. Instead, it should create/update duplicates. Upgrading the module should overwrite the original module files, not the duplicates. Thanks to this, after upgrading the module, you will still see all your customizations and you will be able to update your overwrites to match the newest version. Sometimes [ often? ], upgrading the module might not need any action from the user. We should make sure that overwrites have precedence over original files, for example if partial or a page or a form configuration exist as original file and overwrite, we should always use overwrite first.
