---
converter: markdown
metadata:
  title: Liquid tags for basic CRUD operations
  description: This section describes simplification for executing basic CRUD operations
slug: roadmap/2019-q1/liquid-tags-for-basic-crud-operations
searchable: true
---

This section describes simplification for executing basic CRUD operations.

## Problem

In order to update or create resources in a callback, one needs to duplicate work by not only writing GraphQL mutation, but also FormConfiguration. This makes the code verbose and error prone, as the same parameters needs to be configured in two different files. It should be possible to do simple Create, Read, Update, Delete [CRUD] operations without such overhead.

## Solution

## Create a new User/Customization

It would be much easier to write in a callback something like:
```liquid
{% raw %}
{% parse_json car_properties %}
{
  "model": "a4",
  "production_year": "2002"
}
{% endparse_json %}
{% create 'car', user_id: context.current_user.id, properties: car_properties, result_name: 'car' %}
{{ car.properties.production_year }} # => "2002"
{% endraw %}
```
## Update one record

Assuming we have just created `car`, like in the previous example, we could then update it like this:
```liquid
{% raw %}
{% parse_json car_properties %}
{
  "production_year": "2003"
}
{% endparse_json %}
{% update 'car', id: car.id, properties: car_properties, result_name: 'car' %}
{{ car.properties.production_year }} # => "2003" (updated)
{{ car.properties.model }} # => "a4" - note we are not changing this
{% endraw %}
```

## Delete

Deletion seems to be quite simple:
```liquid
{% raw %}
{% delete 'car', id: car.id result_name: 'car' %}
{% endraw %}
```

## Increment/Decrement value

This issue is currently unsolved. Let's say we want to create counter cache property. Currently it is necessary to write a GraphQL query to take total count of something and then write a GraphQL mutation to update the value. This is prone to various race condition issues, especially if done in async callback. It would be easier and reliable to be able to do it like this:

{% raw %}
```
{% update_number 'car', id: car.id, property: 'number_of_views', value: 1 %}
```
{% endraw %}

This might not be the best name, suggestions are welcome.

## Update multiple records at once

This is another issue which currently is solved in a non ideal way. I am not sure how to ideally solve this, but we can make great improvement if we allow to pass `ids` to `update` tag described above. We could get all ids of objects to be updated via GraphQL, and then would update a bunch of records the same way as one record.

## Fetch object(s)

It would be a great shortcut for various scenarios if we could just write:
```liquid
{% raw %}
{% fetch 'car', id: context.params.slug2, result_name: 'car' %}
{% endraw %}
```

This would be especially useful in, for example, email notifications. If one wanted anything more customized or nested data, then fallback to current way via GraphQL would be the way to go.
