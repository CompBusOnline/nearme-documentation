---
converter: markdown
metadata:
  title: The context variable
  description: This guide will walk you thorugh the details of the context variable
slug: tutorials/variables/context
searchable: true
---

{{ page.metadata.description }}

## Requirements

To follow the steps in this tutorial, you should be familiar with:
 * [Liquid Template language](https://shopify.github.io/liquid/)

## Steps

To learn everything about `context` variable please follow this three easy steps:
1. {% assign step_1 = "What is context variable and how to use it." %}[{{ step_1 }}](#step-1)
2. {% assign step_2 = "Context variable components" %}[{{ step_2 }}](#step-2)
3. {% assign step_3 = "Expose local variable within context variable" %}[{{ step_3 }}](#step-3)

### <a name="step-1" />Step 1: {{ step_1 }}

Context is a global variable that accessible in every liquid file of the project including views, authorization policies and notifications files.
To inspect it's structure and content, you can display it on the page as in the example below:

{% raw %}
```liquid
---
slug: context_example
---
{{ context }}
```
{% endraw %}

### <a name="step-2" />Step 2: {{ step_2 }}

{% raw %}
* **context.authenticity_token** is created by the platform and automatically included in every form generated by `{% form %}` tag. It is used to mitigate [Cross Site Request Forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery) attacks. Has to be added to the payload in all platform requests other than GET.
{% endraw %}

* **context.session** object allows for quick access to session storage. Use mutations in order to store data in session as in [example](https://documentation.platform-os.com/api-reference/graphql/graphql-glossary#operation-name)
* **context.current_user** object returns basic data of currently logged in user. Available attributes are: `first_name`, `last_name`, `email`, `id` and `slug`. It will return `nil` instead of object if user is not logged in.

* **context.headers** object contains whitelisted [HTTP headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) with the data from the current HTTP request.

  Available headers are:
  - SERVER_NAME
  - REQUEST_METHOD
  - PATH_INFO
  - REQUEST_URI
  - HTTP_AUTHORIZATION
  - HTTP_HOST
  - HTTP_USER_AGENT
  - HTTP_REFERER
  - SERVER_PORT
  - QUERY_STRING
  - X-FORWARDED-FOR
  - HTTP_STRIPE_SIGNATURE
  - HTTP_AUTHENTICATION_TOKEN

* **context.params** object contains user data provided in forms.
  Most common use cases are:
  - include form data in notifications
  - form data manipulation through default_payload
  - data validation in authorization_policies

* **context.language** returns String, language ISO code used in current request.
  For more information about built-in translation mechanism go to [translations section](/tutorials/translations/translations)

* **context.environment** returns a string `staging` or `production`. Common use case it to hide some functionalities on production without blocking the release.

* **context.is_xhr** returns `nil` for non xhr and Boolean `true` for XHR requests.

* **context.location** object contains URL data of current request.

  Available attributes are:
  - href
  - host
  - pathname
  - search

* **context.page** object contains information about the [page](/tutorials/pages/pages) on which is included.

  Available attributes are:
  - id
  - slug
  - enable_profiler
  - layout_name
  - metadata

* **context.visitor** returns an object describing browser user. For now there is only one available attribute `ip`.

* **context.cookies** returns object with all of the site's cookies.

### <a name="step-3" />Step 3: {{ step_3 }}

It is possible to prmote local variable so it is available in `context.export` namespace. Use `export` tag to do that as in the following example:

{% raw %}
```liquid
{% assign foo = "bar" %}
{% export foo, namespace: baz %}
{{ context.exports.baz.foo }}
```
{% endraw %}


{% include 'shared/questions_section' %}

