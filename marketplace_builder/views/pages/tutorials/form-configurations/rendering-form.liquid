---
converter: markdown
metadata:
  title: Rendering Form
  description: Form Configurations - rendering form
slug: tutorials/form-configurations/rendering-form
searchable: true
---

In this article you will learn about all possible form configuration options.

## Requirements

To follow the steps in this tutorial, you should be familiar with:
 * [Liquid Template language](https://shopify.github.io/liquid/)
 * PlatformOS Forms [Configuration Options](/tutorials/form-configurations/configuration-options
)

## Defining form implementation

Let's use the example form implementation from [Full Form Configuration example](tutorials/form-configurations/configuration-options)
{% raw %}
```liquid
<p>{{ context.flash.notice }}</p>
<p>{{ context.flash.alert }}</p>
<p>{{ form_builder.fields.properties.greeting.value }}</p>

{% form html-class: 'w-50' %}
  <div class="form-group">
    <label for="form_email">
      Email
    </label>

    <input
      class="form-control"
      name="{{ form_builder.fields.properties.email.name }}"
      value="{{ form_builder.fields.properties.email.value}}"
      id="form_email"
      type="email"
     >

     {{ form_builder.fields.properties.email.validation.rules.presence.message }}
  </div>

  <button class="btn btn-primary">Save</button>
{% endform %}
```
{% endraw %}

## Rendering form as HTML

In order to generate and display form configuration HTML code use [`include_form`](/api-reference/liquid-tags#include_form) tag on any page, partial or layout.
First argument is the name of the form configuration that you want to display, second is "key: value" list of variables that will be accessible in the form.
Example:
{% raw %}
```liquid
{% include_form 'full_form_example', id: params.id %}
```
{% endraw %}


## Form Tag

Using [`form tag`](/api-reference/liquid-tags#form) is the easiest way to generate HTML `form`. It uses the context provided by form configuration to define required attributes and inputs

* **action** - action attribute is defined based on resource context. It is translated to proper [API endpoint](/api-reference/rest-api/)
* **method** - is defined based on `id` parameter passed to [include_form tag](/api-reference/liquid-tags#include_form). When nothing or `new` is passed method will be set to `POST` otherwise `PUT`. `DELETE` method needs to be defined explicitly

  Examples:
  {% raw %}
  ```liquid
  ---
  name: blog_post_delete
  resource: modules/dashboard_blog/blog_post
  resource_owner: anyone
  configuration:
  return_to: 'dashboard/blog'
  ---
  {% form method: 'delete' %}
    <input type="Submit" class='btn btn-link' value="Delete" data-confirmation='You will delete this post permanently. Are you sure?'>
  {% endform %}

  ```
  {% endraw %}

* **hidden inputs** there are multiple inputs generated by form tag.
  {% raw %}
  ```liquid
  <input name="utf8" type="hidden" value="âœ“">
  <input type="hidden" name="authenticity_token" value="Dl+Oaignq4h7fe577kMJBURm0FaFYRr5qrBx2OngXm28SOqaTGR8vdkReHOevfzNBN9HKebr/z46sHyEjPm9NA==">
  <input type="hidden" name="form_configuration_id" value="4099">
  <input type="hidden" name="page_id" value="5492">
  <input type="hidden" name="slug" value="full-form-example">
  <input type="hidden" name="slug2">
  <input type="hidden" name="slug3">
  <input type="hidden" name="resource_id" value="new">
  <input type="hidden" name="parent_resource_id" value="example_model">
  <input type="hidden" name="parent_resource_class" value="CustomModelType">
  ```
  {% endraw %}

  Make sure to add necessary information if you create your HTMK form manually or when you use third party tools like curl to construct your request. Required request parameters are:
  * `form_configuration_name` or `form_configuration_id` is telling PlatformOS which form to use when processing request
  * `parent_resource_id` to identify form object type
  * 'authenticity_token` is required when authorization header is not set, otherwise can be skipped

## Form Builder Object

`form_builder` object is only accessible within the form configuration file because this configuration defines it's state.

List of `form_builder` properties:

* **action** url of form configuration api endpoint usually passed as form action
* **errors** list of validation errors raised on failed form submition. For more information about validation errors visit [Form Validation Tutorial](/tutorials/form-configurations/validation)
* **fields** list of fields that can be altered in the form defined in [form configuration object](/tutorials/form-configurations/configuration-options#configuration).
  Every field has the following properties:
    * name - is what you pass as name in form input field to access the property
    * value - is value assigned to form object property, this might be different that the value stored in the database when validation is raised
    * validation - validation rules and errors
    * property_options - field property options
* **name** - name of form configuration
* **resource** - form configuration resource name
* **resource_owner** - form configuration resource owner
* **system_fields** - object containg data rendered within form tag




