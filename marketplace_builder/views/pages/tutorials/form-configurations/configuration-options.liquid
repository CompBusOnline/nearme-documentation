---
converter: markdown
metadata:
  title: Configuration Options
  description: Form Configurations - configuration options overview
slug: tutorials/form-configurations/configuration-options
searchable: true
---

In this article, you will learn about all possible form configuration options.

## Requirements

To follow the steps in this tutorial, you should be familiar with:
 * [Liquid Template language](https://shopify.github.io/liquid/)
 * PlatformOS [Forms introduction](/tutorials/form-configurations/introduction)

## Full Form Configuration example

The code below present all possible form configuration options together with optional form implementation part that comes just after yaml section. All possible configuration options will be explained in detail in the following section. You can play with the form generated by the example [here](https://nearme-example.staging-oregon.near-me.com/full-form-example).


{% raw %}
```liquid
---
name: full_form_example
resource: example_model
resource_owner: anyone
return_to: '/full-form-example'
flash_alert: "Hello from flash alert"
flash_notice: "Hello from flash notice"
spam_protection: "" # e.g. recaptcha - needs to be fonfigured
configuration:
  properties:
    email:
      validation:
        presence:
          message: "Hello from presence validator"
        email: true
    greeting:
      property_options:
        virtual: true
email_notifications:
- welcome_user
api_call_notifications:
- ping_example_com_on_user_sign_up
callback_actions: >
  {% log "Hello from callback actions" %}
sms_notifications: ""
async_callback_actions:
  delay: 1
  content: |-
    {% log "Hello from async callback actions - I am delayed 1 minute!" %}
authorization_policies:
  - valid_example_policy
default_payload: |-
  {
    "properties_attributes": {
      "greeting": "Hello from default payload!"
    }
  }
---
<p>{{ context.flash.notice }}</p>
<p>{{ context.flash.alert }}</p>
<p>{{ form_builder.fields.properties.greeting.value }}</p>

{% form html-class: 'w-50' %}
  <div class="form-group">
    <label for="form_email">
      Email
    </label>

    <input
      class="form-control"
      name="{{ form_builder.fields.properties.email.name }}"
      value="{{ form_builder.fields.properties.email.value}}"
      id="form_email"
      type="email"
     >

     {{ form_builder.fields.properties.email.validation.rules.presence.message }}
  </div>

  <button class="btn btn-primary">Save</button>
{% endform %}
```
{% endraw %}

Configuration part of the forms defines API endpoint where server listen to specific request and invoke all acctions defined in the form. Implementation part is just what is displayed as HTML to your user. It is optional because sometimes you will only want to configure the server and the request will come from other source like in the example from tutorial: [Building a Contact Form with Customization](/tutorials/customizations/building-contact-form-with-customization#step-2-define-contact-form-–-form-object). For more information about implementation part head to [Rendering Form](/tutorials/form-configurations/rendering-form) tutorial.


## List of required form configuration options

### name
`name` is uniq identifier of the form. It's how you reference your forms in [include_form tag](/api-reference/liquid-tags#include_form). This field doesn't depend of the actual FormConfiguration file name, but it's a good proactice that the file name correspond with the value of name property.

{% include 'alert/warning', content: 'MarketplaceKit currently do not raise an error when two form configuration have the same name - last synced form will be displayed' %}

### resoruce
`resource` is either the name of your CustomModelType or one of predefined PlatformOS clasess. For the full list of classes visit [REST API reference page](api-reference/rest-api).

Examples:
* [Minimal form example](/tutorials/form-configurations/introduction#minimal-form-example) to see the example of **dynamic resource** based on CustomModelType

* [Creating a Sign Up Form](/tutorials/users/creating-sign-up-form#step-2-configure-forms) for the **predefined class resource** example.


## List of optional form configuration options

### api_call_notifications
`api_call_notifications` is array of api call notifications names that will be executed after the form is successfully submitted.

Example from [Creating an API Call Notification](/tutorials/notifications/creating-api-call-notification
):
```yml
api_call_notifications:
  - ping_example_com_on_user_sign_up
```

### async_callback_actions
`async_callback_actions` accepts two parameters:
* delay - Integer, number of minutes added to the moment of form submition before the code defined in `content` is executed.
* content - String, Liquid Template code executed asynchronusly. There is no timeout set for processing this code so it is the right place for more time-consuming calculations.

Example:
{% raw %}
```yml
async_callback_actions:
  delay: 1
  content: >
    {% log "Hello from background" %}
```
{% endraw %}

The example above prints "Hellow from background" string to the output of [`marketplace-kit logs staging`](/tutorials/qa/creating-marketplace-kit-logs).

### authorization_policies
`authorization_policies` Array, list of names of [Authorization Policies](/tutorials/authorization-policy/authorization-policy) that are protecting the form from unauthorized submittion.

### callback_actions
`callback_actions` String, Liquid Template code that is executed as soon as form is succesfully validated.

### configuration
`configuration` Object, whitelist of fields that are allowed to pass to the form object together with the validation rules for each of defined fields. Every property added to the configuration is accessible in `form_builder` variable and has the following configuration options:
** validation - the learn more go to [validation tutorial](/tutorials/form-configurations/validation)


**property_options**
  * virtual - Virtual fields come in handy when there’s no direct mapping to a model attribute or when you plan on displaying but not processing a value.

    Example:
    ```yml
    configuration:
      my_first_virtual_property:
        property_options:
          virtual: true
    ```


### default_payload
`default_payload`, JSON formatted String that is merged with user data provided in form submition.
Head to [Default Payload Tutorial](/tutorials/form-configurations/default-payload) to learn more about it.


### email_notifications
Array of email notifications names that will be executed after the form is successfully submitted.

### flash_alert
`flash_alert` String, message that is passed to `context.flash.alert` object when the form validation is raised.
Read more in separate tutorial [Flash Messages](/tutorials/form-configurations/flash-messages)

### flash_notice
`flash_notice` String, message that is passed to `context.flash.notice` object when the form is valid.
Read more in separate tutorial [Flash Messages](/tutorials/form-configurations/flash-messages)

### redirect_to
`redirect_to` String, defines path of the page rendered after a successful form submission. Example: `/welcome`

### resource_owner
`resource_owner` String, defines form configuration user permissions schema.

Availble values are:
* `owner` - only user that previously created object can update/delete object with that form configuration
* `anyone` - anyone can modify the object

This is very useful when you want to restrict user permissions to modify only records that were previously created by that user.

### sms_notifications
`sms_notifications` Array of short text messages notifications names that will be executed after the form is successfully submitted.

### spam_protection
`spam_protection` String, type of spam protection that will be used. Need to be configured in Partner Portal. There is separate article of how to add [reCaptcha Spam Protaction](/tutorials/integrations/adding-recaptcha-spam-protection)

