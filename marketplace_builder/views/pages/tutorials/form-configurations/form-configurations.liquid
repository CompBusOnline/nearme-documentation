---
converter: markdown
metadata:
  title: Form Configurations
  description: Form Configurations - options overview
slug: tutorials/form-configurations/form-configurations
searchable: true
---

In this article you will learn about all possible form configuration options.

## Requirements

To follow the steps in this tutorial, you should be familiar with:
 * [Liquid Template language](https://shopify.github.io/liquid/)
 * PlatformOS [Forms introduction](/tutorials/form-configurations/introduction)

## List of required form configuration options

### name
`name` is uniq identifier of the form. It's how you reference your forms in [include_form tag](/api-reference/liquid-tags#include_form). This field doesn't depend of the actual FormConfiguration file name, but it's a good proactice that the file name correspond with the value of name property.

{% include 'alert/warning', content: 'MarketplaceKit currently do not raise an error when two form configuration have the same name - last synced form will be displayed' %}

### resoruce
`resource` is either the name of your CustomModelType or one of predefined PlatformOS clasess. For the full list of classes visit [REST API reference page](api-reference/rest-api).

Examples:
* [Minimal form example](/tutorials/form-configurations/introduction#minimal-form-example) to see the example of **dynamic resource** based on CustomModelType

* [Creating a Sign Up Form](/tutorials/users/creating-sign-up-form#step-2-configure-forms) for the **predefined class resource** example.


## List of optional form configuration options

### api_call_notifications
`api_call_notifications` is array of api call notifications names that will be executed after the form is successfully submitted.

Example from [Creating an API Call Notification](/tutorials/notifications/creating-api-call-notification
):
```yml
api_call_notifications:
  - ping_example_com_on_user_sign_up
```

### async_callback_actions
`async_callback_actions` accepts two parameters:
* delay - Integer, number of minutes added to the moment of form submition before the code defined in `content` is executed.
* content - String, Liquid Template code executed asynchronusly. There is no timeout set for processing this code so it is the right place for more time-consuming calculations.

Example:
{% raw %}
```yml
async_callback_actions:
  delay: 1
  content: >
    {% log "Hello from background" %}
```
{% endraw %}

The example above prints "Hellow from background" string to the output of [`marketplace-kit logs staging`](/tutorials/qa/creating-marketplace-kit-logs).

### authorization_policies
`authorization_policies` Array, list of names of [Authorization Policies](/tutorials/authorization-policy/authorization-policy) that are protecting the form from unauthorized submittion.

### callback_actions
`callback_actions` String, Liquid Template code that is executed as soon as form is succesfully validated.

### configuration
`configuration` Object, whitelist of fields that are allowed to pass to the form object together with the validation rules for each of defined fields.

**property_options**
  * readonly - `writeable: false`
  * write only - `readable: false`
  * virtual - Virtual fields come in handy when thereâ€™s no direct mapping to a model attribute or when you plan on displaying but not processing a value.

Example:
```yml
configuration:
  my_first_virtual_property:
    property_options:
      virtual: true
```


### default_payload
`default_payload`, JSON formatted String that is merged with user data provided in form submition.

### email_notifications
Array of email notifications names that will be executed after the form is successfully submitted.

### flash_alert
`flash_alert` String, message that is passed to `context.flash.alert` object when the form validation is raised.

### flash_notice
`flash_notice` String, message that is passed to `context.flash.notice` object when the form is valid.

### redirect_to
`redirect_to` String, defines a url of the page rendered after a successful form submission.

### resource_owner
`resource_owner` String, defines form configuration user permissions schema.

Availble values are:
* `owner` - only user that previously created object can update/delete object with that form configuration
* `anyone` - anyone can modify the object

This is very useful when you want to restrict user permissions to modify only records that were previously created by that user.

### sms_notifications
`sms_notifications` Array of short text messages notifications names that will be executed after the form is successfully submitted.

### spam_protection
`spam_protection` String, type of spam protection that will be used. Need to be configured in Partner Portal

* [Validation](/tutorials/form-configurations/validation)
* [Flash Messages](/tutorials/form-configurations/flash-messages)
* [Default Payload](/tutorials/form-configurations/default-payload)


## Full Form Configuration example


```yml
---
name: full_config_example
resource: car
return_to: '/car'
configuration:
  car
    color:
      virtual: true
email_notifications:
- project_edited_by_admin
callback_actions: >
async_callback_actions:
  delay:
  content: |-
resource_owner: anyone
authorization_policies:
  - must_be_instance_admin
default_payload: |-
  {
    "properties_attributes": {

    }
  }
---
