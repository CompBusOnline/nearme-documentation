---
converter: markdown
metadata:
  title: Forms introduction
  description: This guide will explain to you the basic concepts of forms in PlatformOS.
slug: tutorials/form-configurations
searchable: true
---

HTML forms are essential in every web application, and so they are in PlatfromOS. Because using plain HTML forms can get difficult to maintain with complex data structures, we provide multiple tools that make working with forms much easier.

## Requirements

To follow the steps in this tutorial, you should be familiar with:
 * [Liquid Template language](https://shopify.github.io/liquid/)
 * PlatformOS [Pages](/tutorials/pages/pages)

## Basic concept

Form configuration are defined as liquid files and are locatated within _marektplace_builder/form_configurations_ directory.
Each file is divided into the configuration and implementation section:

* **configuration section** placed on top of the file marked with three dashes `---` at the start and end of the section, is a definition written in [YAML](https://en.wikipedia.org/wiki/YAML) that is telling the platform to create/update form endpoint with given name and settings. These settings determine where to store and how to validate the data. Head to [Form Configuration](/tutorials/form-configurations/form-configurations) section for full list of configuration options.
{% raw %}
* **implementation section** is an HTML part that accepts Liquid Markup with all goodies from PlatfromOS. This is the place where you construct the form displayed to the users. You can construct the form in HTML but it's much easier to use `{% form %}` tag that will handle many tasks behind the scenes, and will make it easier to write clean code.
{% endraw %}


## Minimal form example

Every form configuration is strictly connected with the resource that can be a static class predefined by PlatformOS or dynamic model. The very basic example of the FormConfiguration that enable possiblity to create object of CustomModelType named "Car" and accepts one propery called "color", would look like this:

{% raw %}
```liquid
---
name: "car_form"
resource: "car"
configuration:
  properties:
    color: {}
---

{% form %}
  <input name="{{ form_builder.fields.properties.color.name }}" />
  <button type="submit">Save</button>
{% endform %}
```
{% endraw %}

As already mentioned the file is splited into two sections. In the configuration part you define `name` that is later used to include the form in the view, `resource` that tells the platform which CustomModelType is connected with that form and cofiguration that whitelist model properties that can be altered with this form endpoint.
In the implementation part  [form tag](/api-reference/liquid-tags#form) generates the HTML {% raw %}`<form>`{% endraw %} together with all, required for successful form submition, inputs and properties. Name of the text input, included in the form body, is provided by [form_builder variable](/tutorials/form-configurations/form-builder).

To display the form within a page, use [include_form tag](/api-reference/liquid-tags#include_form) that accepts the name of the form which you want to display:
{% raw %}

```liquid
---
slug: "car"
---
{% include_form "car_form" %}
```
{% endraw %}

Now head to `/car` page and see the result form with text input followed by submit button.


## Next steps

Congratulations! You have created your first form on PlatformOS. Now you can learn more advanced form configuration techiques in:
* [Form Configuration Overview](/tutorials/form-configuration/form-configuration)


{% include 'shared/questions_section' %}

