---
converter: markdown
metadata:
  title: Resetting Password of an Authenticated User
  description: This guide will help you learn how to add password reset functionality to your site.
slug: get-started/users/resetting-password-authenticated-user
searchable: true
---

This guide will help you learn how to add password reset functionality to your site. As this funcitonality is very complex, it uses many Platform OS features.

## Requirements

To follow the steps in this tutorial, you should be familiar with the required directory structure for your code base, and understand the concept of pages, users, Custom Model Types, Custom Attributes, and Authorization Policies. You should also know how to create a form.

* [Required Directory Structure](/how-platformos-works/platformos-components)
* [Pages](/get-started/pages/pages)
* [Users](/get-started/users/users)
* [Custom Model Types](/reference/custom-model-types/custom-model-types)
* [Custom Attributes](/reference/custom-attributes/custom-attributes)
* [Authorization Policies](/get-started/authorization-policy/authorization-policy)
* [Creating a Sign Up Form](/get-started/users/creating-sign-up-form)

## Steps

Resetting a password is a six-step process:

1. Create Custom Model Type to store password reset request
2. Create form to get user email
3. Check user email
4. Store token
5. Send email with password reset instructions
6. Create entry point to the workflow


### Step 1: Create Custom Model Type to store password reset request

Create a Custom Model Type `marketplace_builder/custom_model_types/reset_password.yml`:

{% raw %}

<pre><code class="language-yaml">
name: reset_password
custom_attributes:
- name: email
  attribute_type: string
</code></pre>

{% endraw %}

### Step 2: Create form to get user email

Create a form `form_configurations/recover_password.liquid` to allow users to enter their email address:

{% raw %}

<pre><code class="language-liquid">
---
name: recover_password
resource: Customization
resource_owner: anyone
redirect_to: /recover-password
flash_notice: If you provided the right email, we will send you reset password instructions.
configuration:
  properties:
    email:
      validation:
        presence: true
        email: true
callback_actions: |-
  {% query_graph 'generate_user_temporary_token', email: form.properties.email, result_name: 'g' %}
  {% if g.user %}
    {% execute_query 'update_password_token', id: g.user.id, token: g.user.temporary_token %}
  {% endif %}
---
{% form %}
  &lt;div&gt;
    &lt;label for="email"&gt;&lt;abbr title="required"&gt;*&lt;/abbr&gt; Email&lt;/label&gt;
    &lt;div&gt;
      &lt;input name="{{ form_builder.fields.properties.email.name }}" id="email" type="email"&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  {% submit 'Recover Password' %}
{% endform %}
</code></pre>

{% endraw %}

### Step 3: Check user email

Create a GraphQL query to check if the provided email address has a user associated with it in the DB, and if yes, generate a temporary token, used to authenticate the request.
Create `graph_queries/generate_user_temporary_token.graphql`:

<pre><code class="language-graphql">
query generate_user_temporary_token($email: String) {
  user(email: $email) {
    id
    temporary_token(valid_for: 24)
  }
}
</code></pre>

### Step 4: Store token

If the user exists, you will store the value of the generated token in a Custom Attribute associated with the default profile. To create the custom attribute, create `user_profile_types/default.yml`:

<pre><code class="language-yaml">
name: default
custom_attributes:
- name: password_token
  attribute_type: string
</code></pre>

This way, you can make sure that only the most recent token can be used. To store the actual value, create a GraphQL mutation `graph_queries/update_password_token.graphql`:

<pre><code class="language-graphql">
mutation update_password_token(
  $id: ID!
  $token: String!
) {
  user_update(
    id: $id
    user: {
      profiles: [
        {
          name: "default",
          values: {
            properties: [
              { name: "password_token", value: $token }
            ]
          }
        }
      ]
    }
    form_configuration_name: "update_password_token"
  ) {
    id
  }
}
</code></pre>

Each GraphQL mutation has associated form configuration with it, in this case it's `update_password_token`. Create `form_configurations/update_password_token.liquid`:

{% raw %}

<pre><code class="language-yaml">
---
name: update_password_token
resource: User
resource_owner: anyone
configuration:
  email:
  profiles:
    default:
      properties:
        password_token:
          validation: { presence: true }
email_notifications:
  - send_recover_password
---
</code></pre>

{% endraw %}


### Step 5: Send email with password reset instructions
After storing the token, send an email to the user with password reset instructions. Create file `email_notifications/send_recover_password.liquid`:

{% raw %}

<pre><code class="language-liquid">
---
name: send_recover_password
to: '{{ form.email }}'
delay: 0
enabled: true
trigger_condition: true
from: no-reply@example.com
reply_to: no-reply@example.com
cc:
bcc:
subject: Reset password instructions
layout_path: mailer
---
{%- query_graph 'get_user_with_password_token', email: form.email, result_name: 'g' -%}
<h1>Hi {{ g.user.first_name }}!</h1>

<p>To reset your password, follow the link: <a href="{{ platform_context.host }}/reset-password?token={{ g.user.default.password_token | url_encode }}&amp;email={{ g.user.email | url_encode }}">reset password!</a></p>
</code></pre>

{% endraw %}

The email relies on a GraphQL query called `get_user_with_password_token`, to fetch user's first name and the value of the token, so create `graph_queries/get_user_with_password_token.graphql`:

<pre><code class="language-graphql">

query get_user_with_password_token($email: String, $id: ID) {
  user(email: $email, id: $id) {
    id
    email
    first_name
    default: profile(profile_type: "default") {
      password_token: property(name: "password_token")
    }
  }
}
</code></pre>

### Step 6: Create entry point to the workflow
Create a page as an entry point to the workflow `views/pages/recover_password.liquid`:

{% raw %}

<pre><code class="language-liquid">
---
slug: recover-password
---
<h2>Forgotten Password</h2>
{% if flash.notice != blank %}
  <p>{{ flash.notice }}</p>
{% endif %}
{% render_form 'recover_password', parent_resource_id: 'reset_password' %}
</code></pre>

{% endraw %}

The email contains a link to the `/reset-password` page, so create this page:

{% raw %}

<pre><code class="language-liquid">
---
slug: reset-password
---
{%- query_graph 'get_user_with_password_token', email: params.email, result_name: 'g' -%}
{% assign token_valid = params.token | is_token_valid: g.user.id %}
{% if g.user.id == blank or token_valid == false or g.user.default.password_token != params.token %}
  Unfortunately, provided token is not valid anymore. Please request password instructions again.
{% else %}
  <h2>Reset Password</h2>
  {% render_form 'reset_password', resource_id: @g.user.id %}
{% endif %}
</code></pre>

{% endraw %}

On this page you check, if the provided token is valid as well as fetch the user's id based on the email provided in the parameter. You re-use the GraphQL query created earlier.

On this page, you embed the form to reset the password, so create a file `form_configurations/reset_password.liquid`:

{% raw %}

<pre><code class="language-yaml">
---
name: reset_password
resource: User
resource_owner: anyone
redirect_to: /sign-in
flash_notice: Your password has been updated. You can now log in.
configuration:
  email:
    property_options:
      readonly: true
  password:
    validation:
      confirmation: true
  password_confirmation:
    property_options:
      virtual: true
authorization_policies:
  - token_is_valid
---
</code>
<br/>
<code class="language-liquid">
{% form %}
  &lt;input name="token" value="{{ params.token }}" type="hidden"&gt;
  &lt;input name="email" value="{{ form.email }}" type="hidden"&gt;

  &lt;div&gt;
    &lt;label for="password"&gt;Password&lt;/label&gt;
    &lt;div&gt;
      &lt;input name="{{ form_builder.fields.password.name }}" id="password" type="password"&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div&gt;
    &lt;label for="password_confirmation"&gt;Password confirmation&lt;/label&gt;
    &lt;div&gt;
      &lt;input name="{{ form_builder.fields.password_confirmation.name }}" id="password_confirmation" type="password"&gt;
      {% if form_builder.errors.password_confirmation %}
        &lt;p&gt;{{ form_builder.errors.password_confirmation }}&lt;/p&gt;
      {% endif %}
    &lt;/div&gt;
  &lt;/div&gt;

  {% submit 'Reset Password' %}
{% endform %}
</code></pre>

{% endraw %}

To be able to re-render the previous page if the password validation fails, you forward parameters which came from the email: email and token. The token will also be used in an Authorization Policy, where you authenticate the user with this token to make sure the user can't change any other user's password.

Create this Authorization Policy `authorization_policies/token_is_valid.liquid`:

{% raw %}

<pre><code class="language-liquid">
---
name: token_is_valid
---
{%- query_graph 'get_user_with_password_token', id: params.id, result_name: 'g' -%}
{%- assign token_valid = params.token | is_token_valid: params.id -%}
{% if g.user.id != blank and token_valid == true and g.user.default.password_token == params.token %}true{% endif %}
</code></pre>

{% endraw %}

This concludes the password reset process. If the user provides a valid password and confirms it, the password will be changed and the user will be redirected to the `/sign_in` page. If the password is not valid, the system will re-render the form and display a message explaining what is wrong. Finally, if the user tries to hijack someone else's account by manually changing the id or providing an invalid token, 403 status will be returned and the request will not be processed.

## Next steps
Congratulations! You know how to build a password reset process. Now you can learn about accessing user data:

* [Accessing Authenticated User Data](/get-started/users/accessing-authenticated-user-data)

{% include 'shared/questions_section' %}




