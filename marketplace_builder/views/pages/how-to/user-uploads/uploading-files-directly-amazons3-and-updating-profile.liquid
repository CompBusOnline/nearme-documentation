---
converter: markdown
metadata:
  title: Uploading Files Directly to Amazon S3 and using uploaded file as an avatar
  description: This guide will help you use the Amazon S3 direct upload from the browser using AJAX and using uploaded file as an user avatar
slug: how-to/user-uploads/uploading-files-directly-amazons3-and-updating-profile
searchable: true
---

This guide is combining simple html form that is used to update user profile with direct AWS S3 upload to update user profile and at the same time use AJAX uploaded image in submitted form.

## Requirements
This is an advanced tutorial. To follow it, you should be familiar with basic Platform OS concepts, HTML, Liquid, APIs and Form Configurations, and the topics in the Get Started section.
This guide uses the same Form Configuration, user profile type, and page as [Uploading Files Directly to Amazon S3 Using HTML Form](/how-to/user-uploads/uploading-files-directly-amazons3-using-html-form).

* [Uploading Files Directly to Amazon S3 Using HTML Form](/how-to/user-uploads/uploading-files-directly-amazons3-using-html-form)
* [Uploading Files Directly to Amazon S3 Using AJAX](/how-to/user-uploads/uploading-files-directly-amazons3-using-ajax)

## Steps

Uploading content directly to Amazon S3 with profile update is a three-step process:

1. Prepare HTML form with fields including required metadata
2. Submit file using AJAX
3. Submit form using AWS S3 image url as a value in image field

### Prepare HTML form with fields including required metadata

#### marketplace_builder/form_configurations/developer/update_profile.liquid

Create variables for quicker access later on:

```liquid
{% raw %}
{% assign profile = form_builder.fields.profiles.developer %}
{% assign avatar = profile.custom_images.avatar %}
{% assign image_s3_upload = avatar.image.s3_upload %}
{% endraw %}
```

Load required javascript file that contains code responsible for making the AJAX request:

```html
{% raw %}
<script src="{{ 'UpdateProfileWithDirectUpload.js' | asset_url }}" defer></script>
{% endraw %}
```

Create form, and set up all required data in hidden inputs (those will be read by JavaScript later):

```html
{% raw %}
{% form html-data-s3-direct-upload: 'form' %}
  {% for input in image_s3_upload.form_data %}
    <input type="hidden" name="{{ input[0] }}" value="{{ input[1] }}" data-s3-direct-upload-field="presign" disabled>
  {% endfor %}
  <input type="hidden" name="x-amz-meta-metadata" value="{}" data-s3-direct-upload-field="presign" disabled>
  <input type="hidden" name="action" value="{{ image_s3_upload.direct_upload_url }}" disabled>

  <label for="{{ bio_field.name }}">My bio</label>
  <textarea name="{{ bio_field.name }}" class="form-control" id="{{ bio_field.name }}">{{ bio_field.value }}</textarea>

  <label for="{{ avatar.image.name }}">Avatar</label>
  {% comment %} This field is used as a control for user to interact in the UI {% endcomment %}
  <input type="file" name="file" id="{{ avatar.image.name }}" data-s3-direct-upload-field="file">
  {% comment %} This field's value will be populated by JS with URL to uploaded image {% endcomment %}
  <input type="hidden" name="{{ avatar.image.name }}" data-s3-direct-upload-field="file-url">

  <button class="btn btn-primary mt-3">Update profile</button>
{% endform %}
{% endraw %}
```

### Submit file using AJAX

`UpdateProfileWithDirectUpload.js` file contains all necessary JavaScript needed to handle file sending, error, and preview display.

#### marketplace_builder/assets/UpdateProfileWithDirectUpload.js

```javascript
const qa = s => [...document.querySelectorAll(s)];
const q = s => document.querySelector(s);

const $form = $('[data-s3-direct-upload="form"]');
const $fileField = q('[data-s3-direct-upload-field="file"]');
const $presignFields = qa('[data-s3-direct-upload-field="presign"]');

const getXMLText = (data, key) => $(data).find(key).text() || '';
const getFileName = () => $form.find('[name="file"]').val().split("/").pop().split("\\").pop();

const updateFileUrl = data => {
  // save url where file landed to the database by sending it instead of the file
  const fileUrl = getXMLText(data, "Location");
  q('[data-s3-direct-upload-field="file-url"]').value = fileUrl;
}

const getFormData = () => {
  const formdata = new FormData(); // create empty FormData object

  // append all fields marked by data attribute
  $presignFields.forEach(field => {
    formdata.append(field.name, field.value);
  });

  // and finally, add file as a last field
  formdata.append($fileField.name, $fileField.files[0], getFileName($fileField.value));

  return formdata;
}

const sendForm = data => {
  return $.ajax({
    type: "post",
    url: $form.find('[name="action"]').val(), // url to the s3 is saved inside hidden field named action
    contentType: false,
    processData: false,
    data: data
  });
};

const onFileChange = () => {
  const formData = getFormData();

  sendForm(formData)
    .done(updateFileUrl)
};

$form.find('[name="file"]').on("change", onFileChange);
```

### Submit form using AWS S3 image url as a value in image field

Form should be ready to accept new field values - text for `Bio` and text (url) for image.

{% include 'alert/note', content: 'In our case we are using Platform OS S3 bucket as a hosting for the image, but keep in mind that if you have your own hosting solution for files you can just as well send the image there and use that url to save in the database.' %}

To test the form:

* change text inside the field labeled "My bio"
* upload different image - observe your browsers developer tools to know when upload is done or implement notification
* submit form using submit button

After page reload both fields should have values saved. Image value should have URL.

{% include 'alert/note', content: 'Code above is stripped from non-essential parts. Source code and live example are more complete with error handling, image previews, and more.' %}

## Important notes / troubleshooting

{% include 'how-to/user-uploads/aws-request-requirements' %}

## Live example and source code

{% include 'how-to/user-uploads/live-example-and-source-code' %}

## Additional resources

<ul>
  <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html" target="_blank" rel="noopener">Example: Browser-Based Upload using HTTP POST (Using AWS Signature Version 4)</a></li>
  <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTForms.html" target="_blank" rel="noopener">Creating an HTML Form (Using AWS Signature Version 4)</a></li>
  <li><a href="https://gist.github.com/guumaster/9f18204aca2bd6c71a24" target="_blank" rel="noopener">Upload a file with $.ajax to AWS S3 with a pre-signed url</a></li>
</ul>

{% include 'shared/questions_section' %}
