---
converter: markdown
metadata:
  title: Converting AMP HTML Pages to Layouts and Pages
  description: This guide will help you convert a static theme file into layouts and pages to be used as Platform OS components. 
slug: how-to/amp/converting-amp-html-layouts-pages
searchable: true
---

This guide will help you convert a static theme file into Liquid layouts and pages to be used as Platform OS components. 

Your layout will include what's before and after the content of your HTML page. You will put the content of the HTML page into a separate page.

## Requirements
To follow this tutorial, you should have a static HTML theme downloaded and added to the codebase of your Instance. This tutorial uses the Blog template from AMP Start.

* [Using a Static AMP Template](/how-to/amp/using-static-template)
* [Blog Template](https://www.ampstart.com/archive/blog.zip)

## Steps

Converting HTML pages to layouts and pages is a three-step process:

1. Create page for content 
2. Edit layout  
3. Adjust image paths 

### Step 1: Create page for content 
From the HTML page, copy the content into a separate Liquid page, e.g. `views/pages/blog.liquid`:

* Tip: The `main` tag is usually a good indicator of where the content is starting and ending. 
* Add a slug to your page. 
* The page will use the default layout, so you don't have to specify it. 
* Add a title to your page to make it dynamic. 

<pre><code class="language-liquid">
{% raw %}
---
slug: blog
---
{% content_for 'meta_title' %}Blog{% endcontent_for %}

<main id="content" role="main" class="">
      <article class="recipe-article">
        <header>
...
  </ul></section>
      </section></article>
    </main>
{% endraw %}
</code></pre>

### Step 2: Edit layout 
Edit your layout `views/layouts/application.liquid`: 

* Cut the first part of the HTML page and add it to the top of your layout. 
* Replace or add the `title`. 
* `content_for_layout` will be populated by the `blog.liquid` page content.
* Cut the footer part of the HTML page and add it to the bottom of your layout. 
* Add the AMP symbol `⚡` to the `html` tag. 
* Replace CURRENT_PAGE_URL with a link to your page. 

<pre><code class="language-liquid">
{% raw %}
<!doctype html ⚡>
...
<head>
  <meta charset="utf-8">
  <title>The Recipe Blog</title>
  <link rel="canonical" href="CURRENT_PAGE_URL">
  <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">

  <script async="" src="https://cdn.ampproject.org/v0.js"></script>
  
  <title>
    {% yield 'meta_title' %}
  </title> 
...
</amp-sidebar>

{{ content_for_layout }}

  <footer class="ampstart-footer flex flex-column items-center px3 ">
...
  </body>
</html>
{% endraw %}
</code></pre>

Now, if you sync and check the page, you can see that it's working and it's still a valid AMP page. However, images aren't displayed, because their relative path has changed. 

### Step 3: Adjust image paths
Change the path of images using the `asset_url` filter. Modify each image path from

<pre><code class="language-html">
<amp-img src="../img/blog/spritzer.jpg" width="1280" height="853" layout="responsive" alt="The final spritzer" class="mb4 mx3"></amp-img>
</code></pre>

to 

<pre><code class="language-liquid">
{% raw %}
<amp-img src="{{ 'img/blog/spritzer.jpg' | asset_url }}" width="1280" height="853" layout="responsive" alt="The final spritzer" class="mb4 mx3"></amp-img>
{% endraw %}
</code></pre>

Sync, and see images displayed. 
 
## Next steps

Congratulations! You have converted an HTML template into Platform OS pages and layouts. This means that you can now use all the capabilities of the platform, for example, you can feed data to the pages with GraphQL:

* [Feeding data into AMP Pages with GraphQL](/how-to/amp/feeding-data-amp-pages-graphql)

{% include 'shared/questions_section' %}

  

 


 

