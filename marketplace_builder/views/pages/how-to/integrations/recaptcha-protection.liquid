---
converter: markdown
metadata:
  title: Protection with reCAPTCHA
  description: Add spam protection to your forms
slug: how-to/integrations/recaptcha-protection
searchable: true
---
This guide will help you add spam protection to your forms with Google reCAPTCHA. The goal is to display spam protection only after X number of failed login attempts.

## Requirements

To follow this tutorial, you should be familiar with creating pages and forms, especially loging user.

* [Creating a Page](/get-started/pages/creating-page)
* [Signin a User](/get-started/users/signing-in-user-manually)

## Steps

reCAPTCHA protection is a two-step process:

1.  Add Google reCAPTCHA keys
2.  Create signin page with spam protection.
3.  Count failed login attempts.
4.  Show spam protection only after X number of failed login attempts.

### Step 1: Add Google reCAPTCHA keys.

Go to  [Partner Portal](https://portal.apps.near-me.com/instances) and add reCAPTCHA keys in "Integrations" section. Keys can be generated on https://www.google.com/recaptcha

### Step 2: Create sign-in page with spam protection.

{% raw %}
Start with simple sign-in page with spam protection enabled by default.
Create a sign-in page and sign-in form configuration. Form configuration needs to have attribute `spam_protection: recaptcha` to enable protection. Use also `{% spam_protection %}` tag to generate required js(you can include required js code by your own).
{% endraw %}

#### marketplace_builder/views/pages/sign-in-recaptcha.liquid
```liquid
{% raw %}
---
slug: sign-in-recaptcha
---
<h2>Log in </h2>

{% render_form 'sign_in_with_recaptcha' %}
{% endraw %}

```
#### marketplace_builder/form_configurations/sign_in_with_recaptcha.liquid
```liquid
{% raw %}
---
name: sign_in_with_recaptcha
resource: Session
spam_protection: recaptcha
configuration:
  email:
  password:
---
{% form %}
    <input name="{{ form_builder.fields.email.name }}" value="{{ form_builder.fields.email.value}}" type="email">
    <input name="{{ form_builder.fields.password.name }}" type="password">

  <div class="form-group">
    {{ form_builder.errors.base }}
    {% spam_protection %}
  </div>

  <button>Log In</button>
{% endform %}
{% endraw %}
```


### Step 3: Count failed attempts

In order to show reCAPTCHA only after X failed login attempts we need to know how many times user tried to login. We can count this and store in session. We can use mutation `session_create_field`.
We need also sign-in form configuration without spam protection.

#### marketplace_builder/form_configurations/sign_in_without_recaptcha.liquid
```liquid
{% raw %}
---
name: sign_in_without_recaptcha
resource: Session
configuration:
  email:
  password:
callback_actions: >
  {% execute_query "clear_failed_signin_attempts" %}
---
{% form %}
    <input name="{{ form_builder.fields.email.name }}" value="{{ form_builder.fields.email.value}}" type="email">
    <input name="{{ form_builder.fields.password.name }}" type="password">

  {% if form_builder.errors != empty %}
    {% assign attempts = context.session.failed_attempts | default: 1 | plus: 1 %}
    {% execute_query "set_failed_signin_attempts", attempts: attempts %}
  {% endif %}

  <button>Log In</button>
{% endform %}
{% endraw %}

```

#### marketplace_builder/graph_queries/set_failed_signin_attempts.graphql
```graphql
mutation set_failed_signin_attempts(
  $attempts: Any!
) {
  session_create_field(
    name: "failed_attempts",
    value: $attempts
  )
}
```

### Step 4: Show spam protection only after X number of failed login attempts.

Once we have number of failed attempts in session we can display correct form, with or without spam protection. `context` variable has information about session.

#### marketplace_builder/views/pages/sign-in-recaptcha.liquid
```liquid
{% raw %}
---
slug: sign-in-recaptcha
---
<h2>Log in </h2>

{% assign signin_failed_attempts = context.session.failed_attempts | plus: 0 %}
{% if signin_failed_attempts > 3 %}
  {% render_form 'sign_in_with_recaptcha' %}
{% else %}
  {% render_form 'sign_in_without_recaptcha' %}
{% endif %}
{% endraw %}

```

After user login successfully we should clear session information with callback `{% raw %}{% execute_query "clear_failed_signin_attempts" %}{% endraw %}`

#### marketplace_builder/graph_queries/clear_failed_signin_attempts.graphql
```graphql
mutation clear_failed_signin_attempts {
  session_delete_field(
    name: "failed_attempts"
  )
}
```


## Live example and source code
To play with live example create developer account at [https://nearme-example.staging-oregon.near-me.com](https://nearme-example.staging-oregon.near-me.com) and go to [sign-in-recaptcha](https://nearme-example.staging-oregon.near-me.com/sign-in-recaptcha) page.

[Source code](https://github.com/mdyd-dev/marketplace-nearme-example) can be found at GitHub.

## Additional resources

[Spam Protection liquid tag](/api-reference/liquid-tags)
[Render reCAPTCHA widget by your own](https://developers.google.com/recaptcha/docs/display)

{% include 'shared/questions_section' %}
