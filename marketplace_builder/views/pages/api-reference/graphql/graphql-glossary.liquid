
---
converter: markdown
metadata:
  title: GraphQL Glossary
slug: api-reference/graphql/graphql-glossary
searchable: true
---

This is a glossary of GraphQL related terms with examples from Platform OS implementations. 

## Argument
A set of key-value pairs attached to a specific field. Arguments can be literal values or variables.

```graphql
{
  human(id: "200") {
    weight(unit: "pounds")
    height
  }
}
```

`id` is an argument to `human` in the query above. 

## Alias
An alternative name given to the result of a field to avoid conflicts during data fetching.

```graphql
{
  admin: users(role: admin) {
    id
    firstname
    lastname
  }
  managers: users(role: manager) {
    id
    firstname
    lastname
  }
}
```

`admin` and `managers` are aliases in the example query above.

## Directive

A declaration prefixed with an `@` character that encapsulates programming logic for query execution on the client or server. There are built-in directives such as `@skip` or `@include`. Directives can be used for features such as authentication, incremental data loading, etc. 

```graphql
type User @auth {
  name: String!
  banned: Boolean @auth!
}
```

## Document 
A file or request string that contains one or multiple definitions of a GraphQL type system and can be interpreted by a GraphQL execution engine.

## Field
A unit of data you are asking for in a Schema, which ends up as a field in your JSON response data.

```graphql
type Author {
  id: Int!
  firstName: String
  lastName: String
}
```

`id`, `firstName`, and `lastName` are fields in the `Author` type above.

## Fragment
A selection set that can be reused in multiple query operations. A GraphQL fragment is a shared piece of query logic.

```graphql
fragment UserData on User {
  id: ID!
  firstName: String!
  lastName: String!
}

query getUsers {
  allUsers {
    ...UserData
  }
}
```

## GraphQL Playground
An in-browser IDE for GraphQL development and workflow. Added benefits exist such as theme change, automatic schema reloading, HTTP headers configuration, query history and GraphQL subscription support. 

In Platform OS: `marketplace-kit gui serve`

## Introspection

A technique to provide detailed information about a GraphQL API's schema. Types and fields used in introspection are prefixed with `__` two underscores.

```graphql
{
  __schema {
    types {
      name
    }
  }
}
```

## Mutation
An operation for creating, modifying and destroying data.

```graphql
mutation AddTodo($type: String!) {
  addTodo(type: $type) {
    id
    type
  }
}
```

## Object Type
A type in a GraphQL schema which has fields.

```graphql
type User {
   name: String!,
}
```

`User` is an Object type in the example above.

## Operation
A single query, mutation, or subscription that can be interpreted by a GraphQL execution engine. 

## Operation Name
A name for a single query, mutation, or subscription. Identifying a query or mutation by name is very useful for logging and debugging when something goes wrong in a GraphQL server.

```graphql
mutation AddTodo($type: String!) {
  addTodo(type: $type) {
    id
    type
  }
}

query getHuman {
  human(id: "200") {
    weight(unit: "pounds")
    height
  }
}
```

`AddTodo` and `getHuman` are names for the mutation and query operation respectively.

## Query
A read-only fetch operation to request data from a GraphQL service. 

## Schema
A GraphQL schema is at the center of any GraphQL server implementation and describes the functionality available to the clients which connect to it.

## Schema Definition Language
The syntax for writing GraphQL Schemas. It is otherwise known as Interface Definition Language. It is the lingua franca shared by all for building GraphQL APIs regardless of the programming language chosen.

```graphql
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post]
}
type Post {
  id: Int!
  title: String
  author: Author
  votes: Int
}
type Query {
  posts: [Post]
  author(id: Int!): Author
}
```

## Subscription
A real-time GraphQL operation. A Subscription is defined in a schema like queries and mutations.

```graphql
type Subscription {
  commentAdded(repoFullName: String!): Comment
}
...
subscription onCommentAdded($repoFullName: String!){
  commentAdded(repoFullName: $repoFullName){
    id
    content
  }
}
``` 

## Scalar Type
A type that qualifies the data a GraphQL field resolves. GraphQL ships with some scalar types out of the box; **Int**, **Float**, **String**, **Boolean** and **ID**. However, a custom scalar type such as **Date** can be specified in a GraphQL service implementation.

## Type System
A collection of types which characterizes the set of data that can be validated, queried and executed on a GraphQL API.

_In this glossary we reused content from [Apollo's GraphQL Glossary](https://github.com/apollographql/apollo/blob/master/docs/source/resources/graphql-glossary.md)._ 
