---
converter: markdown
metadata:
  title: Configuring Data Schema
  description: Creating data models to run an e-commerce site powered by PlatformOS
slug: use-cases/e-commerce/configuring-data-schema
searchable: true
---

This guide will help you set up all of the models required to run an e-commerce site.

{% include 'alert/note', content: 'This guide is part of a tutorial series on building an e-commerce website powered by PlatformOS. <a href="/use-cases/e-commerce/e-commerce-platformos">Find the first part of the series here.</a>' %}

In PlatformOS you are pretty much free to build any kind of data model you want. Defining data schema is very similar to creating any other relational database. You can use one of the many tools to create a visual representation of the model. We’ve gone with [dbdiagram.io](https://dbdiagram.io/).

{% include 'use-cases/e-commerce/data-model-graph' %}

Your data schema will be based on three primary models - `user`, `product` and `order`. On PlatformOS side you will use `User` to map the corresponding model and `Custom Model Type` to represent everything else.

## Requirements

To follow this tutorial, you should be familiar with basic PlatformOS concepts, the topics in the Get Started section. You should have set up the instance for development, described in previous part of this tutorial.

- [How Platform OS Works](/how-platformos-works)
- [Get Started](/get-started)
- [Setting up the Instance](/use-cases/e-commerce/setting-up-the-instance)
- [Creating user profile](/tutorials/users/creating-user-profile)
- [Custom model types](/tutorials/custom-model-types/custom-model-types)
- [Custom Images reference](/reference/custom-attributes/custom-images)

## Steps

Creating data schema varies from one project to another. In this case it’s a three-step process:

1. Configure product models
2. Configure user models
3. Configure order models

### Step 1. Configure product models

Every t-shirt in your store will be described by `product_type` and `brand`. Additionally every product may have one or more `photo` attached. Finally, there is a mater of available variants of the product (in this case it’s t—shirt sizes). You will create `stock_level` that will hold information on the available amount of products in specific variant (size).

#### marketplace_builder/custom_model_types/product.yml

```yaml
name: product
custom_attributes:
  - name: name
    attribute_type: string
  - name: description
    attribute_type: text
  - name: gender
    attribute_type: string
  - name: price
    attribute_type: integer
  - name: brand_id
    attribute_type: string
  - name: product_type_id
    attribute_type: string
```

A few items worth noting:

- PlatformOS does not support `enum` data type at the moment. You will handle that on the frontend side with constants.
- Price will be stored as an integer, representing cents, so \$1.00 is stored as `100`. This helps to avoid problematic computations and rounding problems that sometime happen with `float` data type.
- External ids are integer numbers, but since variable types are important and `"100" != 100`, it’s easier to store all IDs as strings.

#### marketplace_builder/custom_model_types/brand.yml

```yaml
name: brand
custom_attributes:
  - name: name
    attribute_type: string
```

#### marketplace_builder/custom_model_types/product_type.yml

```yaml
name: product_type
custom_attributes:
  - name: name
    attribute_type: string
```

#### marketplace_builder/custom_model_types/photo.yml

```yaml
name: photo
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: image
    attribute_type: photo
    versions_configuration:
      thumb:
        width: 250
        height: 345
        transform: resize_to_fill
      mini:
        width: 500
        height: 800
        transform: resize_to_fit
      normal:
        width: 1500
        height: 1200
        transform: resize_to_fit
```

`photo` model will be using special field type called, well, `photo`. It helps automating upload and versions creation. You can [read more on `Custom Images`](/reference/custom-attributes/custom-images).

#### marketplace_builder/custom_model_types/stock_level.yml

```yaml
name: stock_level
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: variant
    attribute_type: string
  - name: amount
    attribute_type: integer
```

### Step 2. Configure user models

`User` is a built-in data type in PlatformOS. It has some predefined fields like `name` and `email`. You can extend `User` with additional custom attributes by using user profiles. Example below uses `default` user profile to add a phone number field. You can [learn more about user profiles](/tutorials/users/creating-user-profile) in our documentation.

#### marketplace_builder/user_profile_types/default.yml

```yaml
name: default
custom_attributes:
  - name: phone
    attribute_type: string
  - name: admin
    attribute_type: boolean
```

Every user will also be able to save multiple `addresses` to his contact book.

#### marketplace_builder/custom_model_types/address.yml

```yaml
name: address
custom_attributes:
  - name: label
    attribute_type: string
  - name: location
    attribute_type: string
  - name: default_address
    attribute_type: boolean
```

{% capture content %}
As you’ve probably noticed we’ve omitted `user_id` attribute. Every `Custom Model Type` in PlatformOS can be attached to another object via built-in `customizable_type` and `customizable_id` fields. You will be setting these values when creating forms.
{% endcapture %}
{% include 'alert/note', content: content %}

{% capture content %}
PlatformOS has a special field type called `CustomAddress`. It allows geolocation and detailed validation of the address. You will not be using that in this example, but go ahead and [read more on `Custom Address` field](/reference/custom-attributes/custom-addresses) on our documentation site.
{% endcapture %}
{% include 'alert/note', content: content %}

### Step 3. Configure order models

Last part of your shop data schema is related to `order`s created by clients. Every order can have multiple products attached and a `shipping_option` selected during checkout. Order is finished with `payment`. You will store history of all payments for given order (usually it will be just one, but we you want to log every interaction with payments API as separate entry). Finally, you will store `order_history` describing any changes to order state (received, paid, shipped, etc.)

#### marketplace_builder/custom_model_types/order.yml

```yaml
name: order
custom_attributes:
  - name: billing_address
    attribute_type: text
  - name: shipping_address
    attribute_type: text
  - name: shipping_option_id
    attribute_type: string
  - name: shipping_option_name
    attribute_type: string
  - name: shipping_price
    attribute_type: integer
  - name: comments
    attribute_type: text
  - name: state
    attribute_type: string
```

#### marketplace_builder/custom_model_types/order_product.yml

```yaml
name: order_product
custom_attributes:
  - name: product_id
    attribute_type: string
  - name: order_id
    attribute_type: string
  - name: name
    attribute_type: string
  - name: variant
    attribute_type: string
  - name: amount
    attribute_type: integer
  - name: price
    attribute_type: integer
```

You’ve probably noticed that some fields are duplicated (shipping) or not referencing other custom types by `id` (addresses). You want to ensure that order data is persistent and do not change after order has been created. If at any point in time admin would remove the shipping option used in this order, or user updates his address in the address book, our order would no longer represent state at the moment of creation. Therefore, you should copy any piece of information prone to being manipulated, when the new order is created. Same logic applies to `order_product` table where information information on the ordered products is stored, along with the reference to the product itself. In case product is removed, or updated, we do not loose any data.

#### marketplace_builder/custom_model_types/order_history.yml

```yaml
name: order_history
custom_attributes:
  - name: order_id
    attribute_type: string
  - name: state
    attribute_type: string
```

#### marketplace_builder/custom_model_types/payment.yml

```yaml
name: payment
custom_attributes:
  - name: order_id
    attribute_type: string
  - name: state
    attribute_type: string
```

{% capture content %}
Data diagram mentioned `timestamp` field for both `payment` and `order_history` data types. PlatformOS automates creation of such timestamps. Every object gets two fields built-in fields `created_at` and `updated_at` that are updated automatically.
{% endcapture %}
{% include 'alert/note', content: content %}

#### marketplace_builder/custom_model_types/shipping_option.yml

```yaml
name: shipping_option
custom_attributes:
  - name: name
    attribute_type: string
  - name: price
    attribute_type: integer
```

## Next steps

Congratulations! You have set up data model that will power your store. You can move to the next step - building an admin section, where you will be able to add and modify t-shirts.

{% include 'shared/questions_section' %}
