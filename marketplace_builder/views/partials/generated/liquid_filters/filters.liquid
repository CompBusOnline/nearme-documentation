---
converter: markdown
---
<div>
{% raw %}



<div>
<h2 class="signature first" id="add_to_array-instance_method">

#<strong>add_to_array</strong>(array, item)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - array to which we add the item given as the second parameter




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array to which we add a new element 

* item (<tt>Object</tt>) - item we add to the array 




### Examples:
```liquid
{% assign array = 'a,b,c' | split: ',' %}
{{ array | add_to_array: 'd' }} => ['a', 'b', 'c', 'd']
```



</div>

<div>
<h2 class="signature " id="add_to_date-instance_method">

#<strong>add_to_date</strong>(date, number_of_days)  &#x21d2; <tt>Date</tt> 



</h2>


### Returns:

(<tt>Date</tt>) - input date/time to which the number_of_days days have been added; use negative values to obtain
a date in the past




### Params:


* date (<tt>Date</tt>, <tt>String</tt>, <tt>Time</tt>) - date to which we add number_of_days 

* number_of_days (<tt>Integer</tt>) - number of days to add to the input date 




### Examples:
```liquid
{{ '2010-01-01' | add_to_date: 1 }} => 2010-01-02
```



</div>

<div>
<h2 class="signature " id="advanced_format-instance_method">

#<strong>advanced_format</strong>(argument_to_format, format)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - formatted string




### Params:


* argument_to_format (<tt>Object</tt>) - object you want to format 

* format (<tt>String</tt>) - should look like: %[flags][width][.precision]type. More examples and information could be taken from: https://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf 




### Examples:
```liquid
{{ 3.124 | advanced_format: '%.2f' }} => 3.12
{{ 3 | advanced_format: '%.2f' }} => 3.00
In the example above flags is not present, width is not present (refers to the total final
length of the string), precision ".2" means 2 digits after the decimal point,
type "f" means floating point
```



</div>

<div>
<h2 class="signature " id="any-instance_method">

#<strong>any</strong>(array = [], query = &#39;true&#39;)  &#x21d2; <tt>Boolean</tt> 



</h2>


### Returns:

(<tt>Boolean</tt>) - checks if given array contains at least one queried string/number




### Params:


* array (<tt>Array</tt>) - array to search through  <em class="default">(defaults to: <tt>[]</tt>)</em> 

* query (<tt>String</tt>, <tt>Number</tt>) - String/Number compared to each item in the given array  <em class="default">(defaults to: <tt>&#39;true&#39;</tt>)</em> 




### Examples:
```liquid
{% assign elements = 'foo,bar' | split: ',' %}
{{ elements | any: 'foo' }} => true
```



</div>

<div>
<h2 class="signature " id="asset_url-instance_method">

#<strong>asset_url</strong>(file_path, **_options)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - url to the physical file if existing, root asset url otherwise




### Params:


* file_path (<tt>String</tt>) -  




### Examples:
```liquid
{{ "valid/file.jpg" | asset_url }} => https://cdn-server.com/valid/file.jpg
```



</div>

<div>
<h2 class="signature " id="compact-instance_method">

#<strong>compact</strong>(array)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - array from which blank values are removed




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array with some blank values 




### Examples:
```liquid
{{ array }} => [1,2,null,4]
{{ array | compact }} => [1,2,4]
```



</div>

<div>
<h2 class="signature " id="compute_hmac-instance_method">

#<strong>compute_hmac</strong>(data, secret, algorithm = &#39;sha256&#39;)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - Keyed-hash message authentication code (HMAC), that can
be used to authenticate requests from third
party apps, for ex. Stripe webhooks requests




### Params:


* data (<tt>String</tt>) - message to be authenticated 

* secret (<tt>String</tt>) - secret key 

* algorithm (<tt>String</tt>) - defaults to SHA256. Supported algorithms are:
SHA, SHA1, SHA224, SHA256, SHA384, SHA512, MD4, MDC2, MD5, RIPEMD160, DSS1  <em class="default">(defaults to: <tt>&#39;sha256&#39;</tt>)</em> 




### Examples:
```liquid
{{ 'some_data' | compute_hmac: 'some_secret', 'MD4' }} => 'cabff538af5f97ccc27d481942616492'
```



</div>

<div>
<h2 class="signature " id="detect-instance_method">

#<strong>detect</strong>(objects, conditions = {})  &#x21d2; <tt>Object</tt> 



</h2>


### Returns:

(<tt>Object</tt>) - with first object from collection that matches provided conditions




### Params:


* objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em class="default">(defaults to: <tt>{}</tt>)</em> 




### Examples:
```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"}]
{{ objects | detect: foo: 2 }} => [{"foo":2,"bar":"b"}]
```



</div>

<div>
<h2 class="signature " id="escape_javascript-instance_method">

#<strong>escape_javascript</strong>(text)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - 




### Params:


* text (<tt>String</tt>) - text to be escaped 





</div>

<div>
<h2 class="signature " id="expand_url_template-instance_method">

#<strong>expand_url_template</strong>(template, params)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - url




### Params:


* template (<tt>String</tt>) - - url template 

* params (<tt>Hash</tt>) - - url data 




### Examples:
```liquid
{{ "/search/{city}/{street}" | expand_url_template city: "Sydney", street: "BlueRoad" }}
=> /search/Sydney/BlueRoad
```



</div>

<div>
<h2 class="signature " id="extract_url_params-instance_method">

#<strong>extract_url_params</strong>(url, templates)  &#x21d2; <tt>Hash</tt> 



</h2>


### Returns:

(<tt>Hash</tt>) - params




### Params:


* url (<tt>String</tt>) -  

* templates (<tt>String</tt>, <tt>Array&lt;String&gt;</tt>) - url templates array 




### Examples:
```liquid
{{ "/search/Sydney/BlueRoad" | extract_url_params: "/search/{city}/{street}" }}
=> {"city"=>"Sydney", "street"=>"BlueRoad"}
```



</div>

<div>
<h2 class="signature " id="fetch-instance_method">

#<strong>fetch</strong>(hash, key)  &#x21d2; <tt>Object</tt> 



</h2>


### Returns:

(<tt>Object</tt>) - 




### Params:


* hash (<tt>Hash</tt>) -  

* key (<tt>String</tt>) -  




### Examples:
```liquid
{{ users | first | fetch: "name"}} => "Jane"
```



</div>

<div>
<h2 class="signature " id="flatten-instance_method">

#<strong>flatten</strong>(array)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - with objects




### Params:


* array (<tt>Array&lt;Array&gt;</tt>) - array of arrays to be processed 




### Examples:
```liquid
{{ array_of_arrays }} => [[1,2], [3,4], [5,6]]
{{ array_of_arrays | flatten }} => [1,2,3,4,5,6]
```



</div>

<div>
<h2 class="signature " id="group_by-instance_method">

#<strong>group_by</strong>(objects, method_name)  &#x21d2; <tt>Hash&lt;MethodResult =&gt; Array&lt;Object&gt;&gt;</tt> 



</h2>


### Returns:

(<tt>Hash&lt;MethodResult =&gt; Array&lt;Object&gt;&gt;</tt>) - the original array grouped by method
specified by the second parameter




### Params:


* objects (<tt>Array&lt;Object&gt;</tt>) - array to be grouped 

* method_name (<tt>String</tt>) - method name to be used to group Objects 




### Examples:
```liquid
{{ objects }} =>  [
  { size: 'xl', color: 'red'},
  { size: 'xl', color: 'yellow'},
  { size: 's', color: 'red'}
 ]
{{ objects | group_by: 'size' }} => {"xl"=>[{"size"=>"xl", "color"=>"red"}, {"size"=>"xl", "color"=>"yellow"}], "s"=>[{"size"=>"s", "color"=>"red"}]}
```



</div>

<div>
<h2 class="signature " id="html_safe-instance_method">

#<strong>html_safe</strong>(text)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - returns string that can be rendered with all html tags
by default all variables are striped from danger html tags




### Params:


* text (<tt>String</tt>) -  





</div>

<div>
<h2 class="signature " id="humanize-instance_method">

#<strong>humanize</strong>(key)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - a human readable string derived from the input; capitalizes the first word, turns
underscores into spaces, and strips a trailing '_id' if present. Meant for creating pretty output.




### Params:


* key (<tt>String</tt>) - input string to be transformed 




### Examples:
```liquid
{{ 'car_model' | humanize }} => 'Car model'
```



</div>

<div>
<h2 class="signature " id="in_groups_of-instance_method">

#<strong>in_groups_of</strong>(array, integer)  &#x21d2; <tt>Array&lt;Array&lt;Object&gt;&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Array&lt;Object&gt;&gt;</tt>) - the original array split into groups having the size
specified by the second parameter (an array of arrays)




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array to be split into groups 

* integer (<tt>Integer</tt>) - the size of each group the array is to be split into 




### Examples:
```liquid
{% assign elements = '1,2,3,4' | split: ','
{{ elements | in_groups_of: 3 }} => [[1, 2, 3], [4, null, null]]
```



</div>

<div>
<h2 class="signature " id="intersection-instance_method">

#<strong>intersection</strong>(array, other_array)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - that exists in both arrays




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* other_array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 




### Examples:
```liquid
{% assign array = '1,2,3,4' | split: ',' %}
{% assign other_array = '3,4,5,6' | split: ',' %}

{{ array | intersection: other_array }} => [3,4]
```



</div>

<div>
<h2 class="signature " id="is_date_before-instance_method">

#<strong>is_date_before</strong>(first_date, second_date)  &#x21d2; <tt>Boolean</tt> 



<span class="aliases">Also known as:
<span class="names"><span id='date_before-instance_method'>date_before</span></span>
</span>

</h2>


### Returns:

(<tt>Boolean</tt>) - returns true if first date is lower than second date




### Params:


* first_date (<tt>DateTime</tt>) - time which will be compared to the second one 

* second_date (<tt>DateTime</tt>) - second time, against which we will do comparison 




### Examples:
```liquid
{{ '2010-01-02' | date_before: '2010-01-03' }} => true
```



</div>

<div>
<h2 class="signature " id="is_date_in_past-instance_method">

#<strong>is_date_in_past</strong>(date)  &#x21d2; <tt>Boolean</tt> 



</h2>


### Returns:

(<tt>Boolean</tt>) - true if date passed is in the past, false otherwise




### Params:


* date (<tt>Date</tt>, <tt>String</tt>, <tt>Time</tt>) - date object, can be also a string 




### Examples:
```liquid
{{ '2010-01-01' | is_date_in_past }} => true
```



</div>

<div>
<h2 class="signature " id="is_included_in_array-instance_method">

#<strong>is_included_in_array</strong>(array, el)  &#x21d2; <tt>Boolean</tt> 



</h2>


### Returns:

(<tt>Boolean</tt>) - whether the array includes the element given




### Params:


* array (<tt>Array</tt>) - array of elements where we look into 

* el (<tt>Object</tt>) - we will look for this element inside the array 




### Examples:
```liquid
{% assign elements = 'a,b,c,d' | split: ',' %}
{{ elements | is_included_in_array: 'c' }} => true
```



</div>

<div>
<h2 class="signature " id="is_token_valid-instance_method">

#<strong>is_token_valid</strong>(token, user_id)  &#x21d2; <tt>Boolean</tt> 



</h2>


### Returns:

(<tt>Boolean</tt>) - returns true if the token has not expired and was generated for given user




### Params:


* token (<tt>String</tt>) - encrypted token generated via temporary_token graphql property 

* user_id (<tt>Integer</tt>) - id of the user who generated token 





</div>

<div>
<h2 class="signature " id="json-instance_method">

#<strong>json</strong>(object)  &#x21d2; <tt>String</tt> 



<span class="aliases">Also known as:
<span class="names"><span id='to_json-instance_method'>to_json</span></span>
</span>

</h2>


### Returns:

(<tt>String</tt>) - JSON formatted string containing a representation of object




### Params:


* object (<tt>Object</tt>) - object we want a JSON representation of 




### Examples:
```liquid
{{ user | json }} => {"name":"Mike","email":"mike@mail.com"}
```



</div>

<div>
<h2 class="signature " id="limit-instance_method">

#<strong>limit</strong>(array, limit)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - parameter; [1,2,3,4] limited to 2 elements gives [1,2]




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array to be shrank 

* limit (<tt>Integer</tt>) - number of elements to be returned 




### Examples:
```liquid
items => [{id: 1, name: 'foo', label: 'Foo'}, {id: 2, name: 'bar', label: 'Bar'}]
{{ items | limit: 1 }} => [{ id: 1, name: 'foo', label: 'Foo' }]
```



</div>

<div>
<h2 class="signature " id="localize-instance_method">

#<strong>localize</strong>(datetime, format = &#39;long&#39;)  &#x21d2; <tt>String</tt><sup>?</sup> 



<span class="aliases">Also known as:
<span class="names"><span id='l-instance_method'>l</span></span>
</span>

</h2>


### Returns:

(<tt>String</tt>, <tt>nil</tt>) - formatted representation of the passed in DateTime object




### Params:


* datetime (<tt>String</tt>, <tt>DateTime</tt>) - DateTime object to be formatted; can be a string and it will be converted
to a date 

* format (<tt>String</tt>) - the format to be used for formatting the date; default is 'long'; other values can be used:
they are taken from translations, keys are of the form 'time.formats.#!{format_name}'  <em class="default">(defaults to: <tt>&#39;long&#39;</tt>)</em> 




### Examples:
```liquid
{{ '2010-01-01' | localize }} => 'January 01, 2010'
```



</div>

<div>
<h2 class="signature " id="map-instance_method">

#<strong>map</strong>(object, method)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - array of objects obtained from the original array of objects
(passed in as the object parameter) by calling the method 'method' on each object
in the original array




### Params:


* object (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* method (<tt>String</tt>) - method name to be called on each of the objects in the passed
in array of objects 




### Examples:
```liquid
{% assign objects = '[{"id":1,"name":"foo","label":"Foo"},{"id":2,"name":"bar","label":"Bar"}]' %}
{{ objects | map: 'name' }} => ['foo', 'bar']
```



</div>

<div>
<h2 class="signature " id="map_attributes-instance_method">

#<strong>map_attributes</strong>(array, *attributes)  &#x21d2; <tt>Array&lt;Array&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Array&gt;</tt>) - array of arrays with values for given keys




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* attributes (<tt>Array&lt;String&gt;</tt>) - array of keys to be extracted 




### Examples:
```liquid
items => [{id: 1, name: 'foo', label: 'Foo'}, {id: 2, name: 'bar', label: 'Bar'}]
{{ items | map_attributes: 'id', 'name' }} => [[1, 'foo'], [2, 'bar']]
```



</div>

<div>
<h2 class="signature " id="markdownify-instance_method">

#<strong>markdownify</strong>(text)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - processed text with markdown syntax changed to HTML




### Params:


* text (<tt>String</tt>) - text using markdown syntax 




### Examples:
```liquid
{{ '# Foo' | markdownify }} => '<h1>Foo</h1>'
```



</div>

<div>
<h2 class="signature " id="matches-instance_method">

#<strong>matches</strong>(text, regexp)  &#x21d2; <tt>Boolean</tt> 



</h2>


### Returns:

(<tt>Boolean</tt>) - whether the given string matches the given regular expression




### Params:


* text (<tt>String</tt>) - string we check against the regular expression 

* regexp (<tt>String</tt>) - string representing a regular expression pattern against which
we try to match the first parameter 




### Examples:
```liquid
{{ 'foo' | matches: '[a-z]' }} => true
```



</div>

<div>
<h2 class="signature " id="new_line_to_br-instance_method">

#<strong>new_line_to_br</strong>(html = &#39;&#39;)  &#x21d2; <tt>String</tt> 



<span class="aliases">Also known as:
<span class="names"><span id='nl2br-instance_method'>nl2br</span></span>
</span>

</h2>


### Returns:

(<tt>String</tt>) - replaces newlines in the input string with the <br /> HTML tag




### Params:


* html (<tt>String</tt>) - HTML string to be processed  <em class="default">(defaults to: <tt>&#39;&#39;</tt>)</em> 




### Examples:
```liquid
{% capture text %}
  foo
  bar
{% endcapture %}

{{ text | new_line_to_br }} => 'foo<br />bar'
```



</div>

<div>
<h2 class="signature " id="number_of_minutes_until-instance_method">

#<strong>number_of_minutes_until</strong>(end_time, start_time = Time.zone.now)  &#x21d2; <tt>Integer</tt> 



</h2>


### Returns:

(<tt>Integer</tt>) - number of minutes




### Params:


* end_time (<tt>DateTime</tt>) - a date time object, must be after start_time 

* start_time (<tt>DateTime</tt>) - defaults to current time  <em class="default">(defaults to: <tt>Time.zone.now</tt>)</em> 




### Examples:
```liquid
assuming it's 9:30am CET
{{ 'today 10am' | to_time: '', 'CET' | number_of_minutes_until }} => 30
{{ 'today 8am' | to_time: '', 'CET' | number_of_minutes_until }} => -90
```



</div>

<div>
<h2 class="signature " id="pad_left-instance_method">

#<strong>pad_left</strong>(str, count, symbol = &#39; &#39;)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - returns string padded from left to length of count with symbol character




### Params:


* str (<tt>String</tt>) - string to pad 

* count (<tt>Integer</tt>) - minimum length of output string 

* symbol (<tt>String</tt>) - string to pad with  <em class="default">(defaults to: <tt>&#39; &#39;</tt>)</em> 




### Examples:
```liquid
{{ 'foo' | pad_left: 5 }} => '  foo'
```



</div>

<div>
<h2 class="signature " id="parameterize-instance_method">

#<strong>parameterize</strong>(text, separator = &#39;-&#39;)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - replaces special characters in a string so that it may be used as part of a 'pretty' URL;
the default separator used is '-';




### Params:


* text (<tt>String</tt>) - input string to be 'parameterized' 

* separator (<tt>String</tt>) - string to be used as separator in the output string; default is '-'  <em class="default">(defaults to: <tt>&#39;-&#39;</tt>)</em> 




### Examples:
```liquid
{{ 'John arrived_foo' | parameterize }} => 'john-arrived_foo'
```



</div>

<div>
<h2 class="signature " id="pluralize-instance_method">

#<strong>pluralize</strong>(string, count = 2)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - pluralized version of the input string




### Params:


* string (<tt>String</tt>) - string to be pluralized 

* count (<tt>Number</tt>) - optional count number based on which string will be pluralized or singularized  <em class="default">(defaults to: <tt>2</tt>)</em> 




### Examples:
```liquid
{{ 'dogs' | pluralize }} => 'dog'
```



</div>

<div>
<h2 class="signature " id="pricify-instance_method">

#<strong>pricify</strong>(amount, currency = &#39;USD&#39;, options = {})  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - formatted price using the global price formatting rules




### Params:


* amount (<tt>Numeric</tt>, <tt>String</tt>) - amount to be formatted 

* currency (<tt>String</tt>) - currency to be used for formatting  <em class="default">(defaults to: <tt>&#39;USD&#39;</tt>)</em> 




### Examples:
```liquid
{{ 1 | pricify }} => '$1 USD'
```



</div>

<div>
<h2 class="signature " id="pricify_cents-instance_method">

#<strong>pricify_cents</strong>(amount, currency = &#39;USD&#39;, options = {})  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - formatted price using the global price formatting rules




### Params:


* amount (<tt>Numeric</tt>, <tt>String</tt>) - amount in cents to be formatted 

* currency (<tt>String</tt>) - currency to be used for formatting  <em class="default">(defaults to: <tt>&#39;USD&#39;</tt>)</em> 




### Examples:
```liquid
{{ 1 | pricify_cents }} => '$0.01 USD'
```



</div>

<div>
<h2 class="signature " id="querify-instance_method">

#<strong>querify</strong>(hash)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - a query string




### Params:


* hash (<tt>Hash{Object =&gt; Object}</tt>) - hash to be "querified" 




### Examples:
```liquid
{{ hash }} => { 'name' => 'Dan', 'id' => 1 }
{{ hash | querify }} => 'name=Dan&id=1'
```



</div>

<div>
<h2 class="signature " id="random_string-instance_method">

#<strong>random_string</strong>(length = 12)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - returns a random alphanumeric string of given length;




### Params:


* length (<tt>Int</tt>) - how many random characters should be included. Default 12  <em class="default">(defaults to: <tt>12</tt>)</em> 




### Examples:
```liquid
{{ 10 | random_string }} => '6a1ee26292227f64fcbf'
```



</div>

<div>
<h2 class="signature " id="raw_escape_string-instance_method">

#<strong>raw_escape_string</strong>(value)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - input string HTML-escaped; this will return a string whose HTML tags will be visible in
the browser




### Params:


* value (<tt>String</tt>) - input string to be HTML-escaped 




### Examples:
```liquid
{{ 'foo<b>bar</b>' | raw_escape_string }} => 'foo&lt;b&gt;bar&lt;/b&gt;'
```



</div>

<div>
<h2 class="signature " id="regex_matches-instance_method">

#<strong>regex_matches</strong>(text, regexp)  &#x21d2; <tt>Array&lt;Array&lt;String&gt;&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Array&lt;String&gt;&gt;</tt>) - matches for the expression in the string;
each item in the array is an array containing all groups matches; for example
for the regex (.)(.) and the text 'abcdef', the result will look like:
[["a", "b"], ["c", "d"], ["e", "f"]]




### Params:


* text (<tt>String</tt>) -  

* regexp (<tt>String</tt>) - regexp to use for matching 




### Examples:
```liquid
To retrieve the URL from a meta tag see the example below:
{% assign text = '<html><head><meta property="og:image" content="http://somehost.com/someimage.jpg" /></head><body>content</body></html>' | html_safe %}

{% assign matches = text | regex_matches: '<meta\s+property="og:image"\s+content="([^"]+)"' %}

{% if matches.size > 0 %}
  {% assign image_path = matches[0][0] %}
  {{ image_path }}
{% endif %}
```



</div>

<div>
<h2 class="signature " id="reject-instance_method">

#<strong>reject</strong>(objects, conditions = {})  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - with objects from collection that don't match provided conditions




### Params:


* objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em class="default">(defaults to: <tt>{}</tt>)</em> 




### Examples:
```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"},{"foo":2,"bar":"d"}]
{{ objects | reject: foo: 2 }} => [{"foo":1,"bar":"a"},{"foo":3,"bar":"c"}]
```



</div>

<div>
<h2 class="signature " id="rotate-instance_method">

#<strong>rotate</strong>(array, count = 1)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - the input array rotated by a number of times given as the second
parameter; [1,2,3,4] rotated by 2 gives [3,4,1,2]




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array to be rotated 

* count (<tt>Integer</tt>) - number of times to rotate the input array  <em class="default">(defaults to: <tt>1</tt>)</em> 




### Examples:
```liquid
{% assign numbers = "1,2,3" | split: "," %}
{{ numbers | rotate }} => [3,2,1]
```



</div>

<div>
<h2 class="signature " id="select-instance_method">

#<strong>select</strong>(objects, conditions = {})  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - with objects from collection that matches provided conditions




### Params:


* objects (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* conditions (<tt>Hash</tt>) - hash with conditions { field_name: value }  <em class="default">(defaults to: <tt>{}</tt>)</em> 




### Examples:
```liquid
{{ objects }} => [{"foo":1,"bar":"a"},{"foo":2,"bar":"b"},{"foo":3,"bar":"c"},{"foo":2,"bar":"d"}]
{{ objects | select: foo: 2 }} => [{"foo":2,"bar":"b"},{"foo":2,"bar":"d"}]
```



</div>

<div>
<h2 class="signature " id="sha1-instance_method">

#<strong>sha1</strong>(object)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - SHA1 digest of the input object




### Params:


* object (<tt>String</tt>) - input object whose digest we want to obtain 




### Examples:
```liquid
{{ 'foo' | sha1 }} => '0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33'
```



</div>

<div>
<h2 class="signature " id="slugify-instance_method">

#<strong>slugify</strong>(text)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - replaces special characters in a string so that it may be used as part of a 'pretty' URL;




### Params:


* text (<tt>String</tt>) - input string to be 'slugified' 




### Examples:
```liquid
{{ 'John arrived_foo' | slugify }} => 'john-arrived-foo'
```



</div>

<div>
<h2 class="signature " id="strftime-instance_method">

#<strong>strftime</strong>(date, format, zone = nil)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - formatted representation of the date object; the formatted representation
will be based on what the format parameter specifies




### Params:


* date (<tt>Date</tt>, <tt>Time</tt>, <tt>DateTime</tt>) - date object 

* format (<tt>String</tt>) - string representing the desired output format 

* zone (<tt>String</tt>) - string representing the time zone
e.g. '%Y-%m-%d' will result in something like '2020-12-12'  <em class="default">(defaults to: <tt>nil</tt>)</em> 




### Examples:
```liquid
{{ '2018-05-30T09:12:34.000-07:00' | strftime: '%Y-%m-%d %H:%M' }} => 2018-05-30 09:12

{% assign time = '2010-01-01 08:00' | to_time_from_str %}
{{ time | strftime: "%Y-%m-%d" }} => '2010-01-01'
```



</div>

<div>
<h2 class="signature " id="subtract_array-instance_method">

#<strong>subtract_array</strong>(array, other_array)  &#x21d2; <tt>Array&lt;Object&gt;</tt> 



</h2>


### Returns:

(<tt>Array&lt;Object&gt;</tt>) - that is a difference between two arrays




### Params:


* array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 

* other_array (<tt>Array&lt;Object&gt;</tt>) - array of objects to be processed 




### Examples:
```liquid
{% assign array = '1,2' | split: ',' %}
{% assign other_array = '2' | split: ',' %}

{{ array | subtract_array: other_array }} => [1]
```



</div>

<div>
<h2 class="signature " id="sum_array-instance_method">

#<strong>sum_array</strong>(array)  &#x21d2; <tt>Numeric</tt> 



</h2>


### Returns:

(<tt>Numeric</tt>) - summarised value of array




### Params:


* array (<tt>Array&lt;Numeric&gt;</tt>) - array with values to be summarised 




### Examples:
```liquid
{% assign numbers = '1,2,3' | split: ',' %}
{{ numbers | sum_array }} => 6
```



</div>

<div>
<h2 class="signature " id="titleize-instance_method">

#<strong>titleize</strong>(text)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - capitalizes all the words and replaces some characters in the string to create
a nicer looking title; it is meant for creating pretty output




### Params:


* text (<tt>String</tt>) - string to be processed 




### Examples:
```liquid
{{ 'foo bar_zoo-xx' | titleize }} => 'Foo Bar Zoo Xx'
```



</div>

<div>
<h2 class="signature " id="to_date-instance_method">

#<strong>to_date</strong>(datetime)  &#x21d2; <tt>Date</tt> 



</h2>


### Returns:

(<tt>Date</tt>) - a Date object obtained/parsed from the input object




### Params:


* datetime (<tt>Date</tt>, <tt>String</tt>, <tt>Object</tt>) - object from which we try to obtain/parse a date object 




### Examples:
```liquid
{{ '2010-01-01 8:00:00' | to_date }} => 2010-01-01
```



</div>

<div>
<h2 class="signature " id="to_hash-instance_method">

#<strong>to_hash</strong>(object)  &#x21d2; <tt>Hash</tt> 



</h2>


### Returns:

(<tt>Hash</tt>) - Hash created based on JSON




### Params:


* object (<tt>Object</tt>) - String containing valid JSON 




### Examples:
```liquid
{% assign text = '{ "name": "foo", "bar": {} }' %}
{% assign object = text | to_hash %}
{{ object.name }} => 'foo'
```



</div>

<div>
<h2 class="signature " id="to_mobile_number-instance_method">

#<strong>to_mobile_number</strong>(number, country = nil)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - returns mobile number in E.164 format; recommended for sending sms notifications




### Params:


* number (<tt>String</tt>) - the base part of mobile number 

* country (<tt>String</tt>) - country for which country code should be used. Can be anything - full name, iso2, iso3  <em class="default">(defaults to: <tt>nil</tt>)</em> 




### Examples:
```liquid
{{ '500 123 999' | to_mobile_number: 'PL' }} => '+48500123999'
```



</div>

<div>
<h2 class="signature " id="to_positive_integer-instance_method">

#<strong>to_positive_integer</strong>(param, default)  &#x21d2; <tt>Integer</tt> 



</h2>


### Returns:

(<tt>Integer</tt>) - 




### Params:


* param (<tt>Object</tt>) - value to be coerced to posivite integer 

* default (<tt>Integer</tt>) - default value in case param is not valid positive integer 




### Examples:
```liquid
{{ '1' | to_positive_integer: 2 }} => 1
{{ '' | to_positive_integer: 2 }} => 2
```



</div>

<div>
<h2 class="signature " id="to_time-instance_method">

#<strong>to_time</strong>(time, zone = nil, format = nil)  &#x21d2; <tt>DateTime</tt> 



</h2>


### Returns:

(<tt>DateTime</tt>) - a time object created from parsing the string representation of time given as input




### Params:


* time (<tt>String</tt>, <tt>Integer</tt>) - a string representation of time for example 'today', '3 days ago' etc. a integer in unix time format 




### Examples:
```liquid
{{ 'today' | to_time }} => 2017-04-15 15:21:00
{{ 'today' | to_time '', 'UTC' }} => 2017-04-15 15:21:00
{{ '1 day ago' | to_time }} => 2017-04-14 15:21:00
{{ '5 days from now' | to_time }} => 2017-04-14 15:21:00
{{ '2010:01:01' | to_time: '%Y:%m:%d' }} => 2010-01-01 00:00:00
```



</div>

<div>
<h2 class="signature " id="translate-instance_method">

#<strong>translate</strong>(key, options = {})  &#x21d2; <tt>String</tt> 



<span class="aliases">Also known as:
<span class="names"><span id='t-instance_method'>t</span></span>
</span>

</h2>


### Returns:

(<tt>String</tt>) - translation value taken from translations yml file for the key given as parameter




### Params:


* key (<tt>String</tt>) - translation key 

* options (<tt>Hash{String =&gt; String}</tt>) - values passed to translation string  <em class="default">(defaults to: <tt>{}</tt>)</em> 




### Examples:
```liquid
{{ 'beer' | translate }} => 'cerveza'
```



</div>

<div>
<h2 class="signature " id="url_for_path_with_token-instance_method">

#<strong>url_for_path_with_token</strong>(path, user)  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - returns a url for the given page slug, which includes user temporary token;





### Examples:
```liquid
{{ '/account' | url_for_with_token: current_user }} => 'https://example.com/account?temporary_token=TOKEN_HERE'
```



</div>

<div>
<h2 class="signature " id="video_params-instance_method">

#<strong>video_params</strong>(url)  &#x21d2; <tt>Hash</tt> 



</h2>


### Returns:

(<tt>Hash</tt>) - metadata about video




### Params:


* url (<tt>String</tt>) - url to a video on the internet 




### Examples:
```liquid
{{ 'https://www.youtube.com/watch?v=8N_tupPBtWQ' | video_params }}
=> {"provider"=>"YouTube", "url"=>"https://www.youtube.com/watch?v=8N_tupPBtWQ", "video_id"=>"8N_tupPBtWQ", "embed_url"=>"//www.youtube.com/embed/8N_tupPBtWQ", "embed_code"=>"<iframe src=\"//www.youtube.com/embed/8N_tupPBtWQ\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>"},
```



</div>

<div>
<h2 class="signature " id="videoify-instance_method">

#<strong>videoify</strong>(url = &#39;&#39;, options = {})  &#x21d2; <tt>String</tt> 



</h2>


### Returns:

(<tt>String</tt>) - if the given url is supported, an HTML formatted string containing a video player (inside an iframe)
which will play the video at the given url; otherwise an empty string is returned




### Params:


* url (<tt>String</tt>) - url to a video on the internet  <em class="default">(defaults to: <tt>&#39;&#39;</tt>)</em> 





</div>




{% endraw %}
</div>
