require 'graphql-docs'
task default: %w[build]

task :build do
  options = GraphQLDocs::Configuration::GRAPHQLDOCS_DEFAULTS.merge(
    filename: '../../tmp/schema.graphql',
    output_dir: '../../marketplace_builder/views/partials/generated/graphql-docs',
    landing_pages: GraphQLDocs::Configuration::GRAPHQLDOCS_DEFAULTS[:landing_pages].merge(
      index: 'landing_pages/index.md'
    ),
    templates: GraphQLDocs::Configuration::GRAPHQLDOCS_DEFAULTS[:templates].merge(
      includes: 'layouts/includes',
      default: 'layouts/default.html',
      sidebar: 'layouts/sidebar.html',
      operations: 'layouts/graphql_operations.html'
    ),
    use_default_styles: false,
    base_url: '/api-reference/graphql/g',
    delete_output: true
  )

  GraphQLDocs.build(options)

  generate_sidebar(options)
end

def generate_sidebar(options)
  response = File.read('../../tmp/schema.graphql')
  parser = GraphQLDocs::Parser.new(response, {})
  CustomGenerator.new(parser.parse, options).generate
end

require 'erb'
require 'sass'
class CustomGenerator
  include GraphQLDocs::Helpers

  attr_accessor :parsed_schema

  def initialize(parsed_schema, options)
    @parsed_schema = parsed_schema
    @options = options

    @renderer = @options[:renderer].new(@parsed_schema, @options)

    sym = :sidebar
    if !File.exist?(@options[:templates][sym])
      raise IOError, "`#{sym}` template #{@options[:templates][sym]} was not found"
    end
    instance_variable_set("@graphql_#{sym}_template", ERB.new(File.read(@options[:templates][sym])))
  end

  def generate
    contents = @graphql_sidebar_template.result(OpenStruct.new(default_generator_options).instance_eval { binding })
    write_file('shared', 'sidebar', contents)

    true
  end

  private

  def default_generator_options(opts = {})
    @options.merge(opts).merge(helper_methods)
  end

  def write_file(type, name, contents, trim: true)
    path = File.join(@options[:output_dir], type, name.downcase)
    FileUtils.mkdir_p(path)

    if trim
      # normalize spacing so that CommonMarker doesn't treat it as `pre`
      contents.gsub!(/^\s+$/, '')
      contents.gsub!(/^\s{4}/m, '  ')
    end

    filename = File.join(path, 'index.html')
    contents = @renderer.render(contents, type: type, name: name, filename: filename)
    File.write(filename, contents) unless contents.nil?
  end
end
